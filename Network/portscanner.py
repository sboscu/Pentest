import socket
import threading
from queue import Queue


def portscan_TCP(port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)
        sock.connect((target, port))
        return True
    except:
        return False

def portscan_UDP(port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(0.5)
        sock.connect((target, port))
        return True
    except:
        return False


def fill_queue(port_list):
    # fills queue with ports first in first out
    for port in port_list:
        queue.put(port)


def worker():
    while not queue.empty():

        #Get port from queue
        port = queue.get()

        # Start TCP scan of selected port
        if portscan_TCP(port):
            open_ports_tcp.append(port)

        # Start UDP scan of selected port
        if portscan_UDP(port):
            open_ports_udp.append(port)



if __name__ == '__main__':

    target = input("Provide target: ")
    if target == "":
        target = "127.0.0.1"
        print(f"[!] No target set, using default {target}")

    max_threads = int(input("Specify Max Threads: "))

    queue = Queue()
    open_ports_tcp = []
    open_ports_udp = []

    port_list = range(1, 1024)
    fill_queue(port_list)

    thread_list = []

    print("[~] Start PortScanner")

    #Set Range as max threads, first line starts the worker() function, line tweo append the thread to the thread_list
    for t in range(max_threads):
        thread = threading.Thread(target=worker)
        thread_list.append(thread)

    #Start threads
    for thread in thread_list:
        thread.start()

    #Stop only when all response has been captures from the thread list
    for thread in thread_list:
        thread.join()

    print(f"[#]Open TCP ports are: {open_ports_tcp}")
    print(f"[#]Open UDP ports are: {open_ports_udp}")







